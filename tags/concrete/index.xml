<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>concrete on Giacomo's Blog</title><link>https://wizardofmenlo.github.io/tags/concrete/</link><description>Recent content in concrete on Giacomo's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 03 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://wizardofmenlo.github.io/tags/concrete/index.xml" rel="self" type="application/rss+xml"/><item><title>Speeding up fold computation</title><link>https://wizardofmenlo.github.io/blurbs/whir-folding/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://wizardofmenlo.github.io/blurbs/whir-folding/</guid><description>Computing folds is a large portion of the verifier work in schemes like FRI, STIR and WHIR. We describe an optimization to reduce this cost.</description></item><item><title>WHIR: Reed–Solomon Proximity Testing with Super-Fast Verification</title><link>https://wizardofmenlo.github.io/papers/whir/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://wizardofmenlo.github.io/papers/whir/</guid><description>We present WHIR (Weights Help Improving Rate), an interactive oracle proof of proximity (IOPP) for constrained Reed–Solomon codes. WHIR doubles as a multilinear polynomial commitment scheme, achieving the fastest verification speed of any such scheme while mantaining state-of-the-art argument size, verifier hash complexity and prover times.</description></item><item><title>zkSNARKs in the ROM with Unconditional UC-Security</title><link>https://wizardofmenlo.github.io/papers/uc-snarks/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://wizardofmenlo.github.io/papers/uc-snarks/</guid><description>We show that commonly deployed zkSNARKs are UC-secure in the ROM, with no modifications needed.</description></item><item><title>STIR: Reed–Solomon Proximity Testing with Fewer Queries</title><link>https://wizardofmenlo.github.io/papers/stir/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://wizardofmenlo.github.io/papers/stir/</guid><description>We present STIR (Shift To Improve Rate), a concretely efficient interactive oracle proof of proximity (IOPP) for Reed–Solomon codes that achieves the best known query complexity of any concretely efficient IOPP for this problem.</description></item><item><title>STIR: Setting Parameters</title><link>https://wizardofmenlo.github.io/blurbs/stir-parameters/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://wizardofmenlo.github.io/blurbs/stir-parameters/</guid><description>STIR has a few more parameters to tweak compared to FRI. Here we mention a few and how they impact the concrete performance of the scheme.</description></item><item><title>A Time-Space Tradeoff for the Sumcheck Prover</title><link>https://wizardofmenlo.github.io/papers/blendy-sumcheck/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><guid>https://wizardofmenlo.github.io/papers/blendy-sumcheck/</guid><description>We present a new family of algorithms for the sumcheck protocol prover that offer new time-space tradeoffs.</description></item></channel></rss>